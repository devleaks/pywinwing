"""Winwing MCDU constants
"""

from dataclasses import dataclass
from enum import Enum, IntEnum


# #######################################@
# Device and application constant
#
class MCDU_STATUS(IntEnum):
    """Global MCDU adapter status"""

    NOT_RUNNING = 0
    CONNECTED = 1
    AIRCRAFT_DETECTED = 2
    WAITING_FOR_DATA = 3
    RUNNING = 9


class MCDU_DEVICE_MASKS(IntEnum):
    NONE = 0
    MCDU = 0x01
    CAP = 0x10
    FO = 0x20
    OBS = 0x40
    # PFP3N = 0x02
    # PFP4 = 0x04
    # PFP7 = 0x08


class MCDU_BRIGHTNESS(Enum):
    BACKLIGHT = 0  # 0 .. 255
    SCREEN_BACKLIGHT = 1  # 0 .. 255
    LEDS_BRIGHTNESS = 2  # 0 .. 255


class MCDU_BRIGHTNESS_NAME(Enum):
    BACKLIGHT = "KeyboardBacklight"
    SCREEN_BACKLIGHT = "LCDBacklight"


SENSOR_CHECK_FREQUENCY = 40

BRIGHTNESS_AUTO_ADJUST = [  # set to False to suppress auto-adjust
    (1000, 0, 255, 255, "bright"),
    (600, 64, 224, 196, "high"),
    (400, 128, 196, 164, "medium"),
    (200, 196, 164, 128, "low"),
    (100, 255, 128, 128, "dark"),
]


class MCDU_ANNUNCIATORS(Enum):
    FAIL = 8
    FM = 9
    MCDU = 10
    MENU = 11
    FM1 = 12
    IND = 13
    RDY = 14
    STATUS = 15
    FM2 = 16


# #######################################@
# Display Constants
#
PAGE_LINES = 14  # Header + 6 * label + 6 * cont + textbox
PAGE_CHARS_PER_LINE = 24
PAGE_BYTES_PER_CHAR = 3
PAGE_BYTES_PER_LINE = PAGE_CHARS_PER_LINE * PAGE_BYTES_PER_CHAR
PAGE_BYTES_PER_PAGE = PAGE_BYTES_PER_LINE * PAGE_LINES

# #######################################@
# Special datarefs for application management
#
AUTHOR_DATAREF = "sim/aircraft/view/acf_author"
ICAO_DATAREF = "sim/aircraft/view/acf_ICAO"
AIRCRAFT_DATAREFS = [AUTHOR_DATAREF, ICAO_DATAREF]


# #######################################@
# List of MCDU keys
#
class ButtonType(Enum):
    SWITCH = 0
    TOGGLE = 1
    NONE = 5


class DrefType(Enum):
    DATA = 0
    CMD = 1
    NONE = 2


@dataclass
class Button:
    """Wrapper class around a MCDU key"""

    id: int
    label: str
    dataref: str | None = None
    dreftype: DrefType = DrefType.DATA
    type: ButtonType = ButtonType.NONE
    led: MCDU_ANNUNCIATORS | None = None


# #######################################@
# Colors (up to 10 colors)
#
@dataclass
class Color:
    """Wrapper class around a color key"""

    name: str
    key: str
    ww_mask: bytes
    term: str
    rgb: tuple  # this color will be used on display


BACKGROUND_COLOR = [0x00, 0x00, 0x00]

class BACKGROUND_COLOR_CODES(IntEnum):
    NONE = 0  # black
    GREY = 1
    BLACK = 2
    RED = 3
    GREEN = 4
    BLUE = 5
    YELLOW = 6
    PURPLE = 7
    WINWING_LOGO = 8

# MobiFlight use:
# "a" // amber
# "w" // white
# "c" // cyan
# "g" // green
# "m" // magenta
# "r" // red
# "y" // yellow
# "o" // brown
# "e" // grey
# "k" // khaki
#
# '\u2610'  # ballot box
# '\u2191'  # up arrow
# '\u2193'  # down arrow
# '\u2192'  # right arrow
# '\u2190'  # left arrow
# '\u0394'  # Greek Delta for overfly
#
COLOR_MASKS = [i * 0x0021 for i in range(10)]


class COLORS(Enum):
    BLACK = Color(name="black", key="l", ww_mask=0x0000, term="\033[38;5;0m", rgb=(0, 0, 0))  # L, Should be brown, o
    AMBER = Color(name="amber", key="a", ww_mask=0x0021, term="\033[38;5;208m", rgb=(255, 179, 0))
    WHITE = Color(name="white", key="w", ww_mask=0x0042, term="\033[38;5;231m", rgb=(255, 255, 255))
    CYAN = Color(name="cyan", key="b", ww_mask=0x0063, term="\033[38;5;39m", rgb=(0, 255, 255))
    GREEN = Color(name="green", key="g", ww_mask=0x0084, term="\033[38;5;46m", rgb=(0, 255, 61))
    MAGENTA = Color(name="magenta", key="m", ww_mask=0x00A5, term="\033[38;5;165m", rgb=(255, 99, 255))
    RED = Color(name="red", key="r", ww_mask=0x00C6, term="\033[38;5;196m", rgb=(255, 0, 0))
    YELLOW = Color(name="yellow", key="y", ww_mask=0x00E7, term="\033[38;5;226m", rgb=(255, 255, 0))
    KAKI = Color(name="kaki", key="x", ww_mask=0x0108, term="\033[38;5;221m", rgb=(97, 92, 66))  # X, k
    GREY = Color(name="grey", key="e", ww_mask=0x0129, term="\033[38;5;251m", rgb=(119, 119, 119))  # E
    DEFAULT = Color(name="white", key="w", ww_mask=0x0042, term="\033[38;5;231m", rgb=(255, 255, 255))

    @property
    def name(self) -> str:
        return self.value.name

    @property
    def key(self) -> str:
        return self.value.key

    @property
    def ww_mask(self) -> bytes:
        return self.value.ww_mask

    @property
    def term(self) -> str:
        return self.value.term

    @property
    def rgb(self) -> tuple:
        return self.value.rgb


def BUILD_INIT_SEQUENCE() -> list:
    def reverse(a):
        a = list(a)
        a.reverse()
        return a

    # to shorted strings
    c = {q.ww_mask: reverse(q.rgb) for q in COLORS}
    b = BACKGROUND_COLOR
    # fmt: off
    # It seems that in sequece 0x32,0xbb, 0x32 is a product identifier: 0x32 for MCDU, 0x31 for PFP*
    return [
        [0xf0,0x0,0x1,0x38,0x32,0xbb,0x0,0x0,0x1e,0x1,0x0,0x0,0xc4,0x24,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x18,0x01,0x0,0x0,0xc4,0x24,0xa,0x0,0x0,0x8,0x0,0x0,0x0,0x34,0x0,0x18,0x0,0xe,0x0,0x18,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0xc4,0x24,0xa,0x0,0x0,0xe,0x0,0x0,0x0,0x0,],
        [0xf0,0x0,0x2,0x38,0x0,0x0,0x0,0x1,0x0,0x5,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0xc4,0x24,0xa,0x0,0x0,0xe,0x0,0x0,0x0,0x1,0x0,0x6,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x0,0x0,0x0,0x0,],
        [0xf0,0x0,0x3,0x38,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x2,0x0,c[0x00][0],c[0x00][1],c[0x00][2],0xff,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x2,0x0,c[0x21][0],c[0x21][1],c[0x21][2],0xff,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x0,0x0,],
        [0xf0,0x0,0x4,0x38,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x2,0x0,c[0x42][0],c[0x42][1],c[0x42][2],0xff,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x2,0x0,c[0x63][0],c[0x63][1],c[0x63][2],0xff,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,],
        [0xf0,0x0,0x5,0x38,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x2,0x0,c[0x84][0],c[0x84][1],c[0x84][2],0xff,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x2,0x0,0xff,0x63,0x0,0x0,0x0,0x0,],
        [0xf0,0x0,0x6,0x38,0xff,0xff,0x9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x2,0x0,c[0xc6][0],c[0xc6][1],c[0xc6][2],0xff,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x0,0x0,],
        [0xf0,0x0,0x7,0x38,0x0,0x0,0x2,0x0,c[0xe7][0],c[0xe7][1],c[0xe7][2],0xff,0xb,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x2,0x0,c[0x108][0],c[0x108][1],c[0x108][2],0xff,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x0,0x0,0x0,0x0,],
        [0xf0,0x0,0x8,0x38,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x2,0x0,c[0x129][0],c[0x129][1],c[0x129][2],0xff,0xd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x2,0x0,0x5e,0x73,0x79,0xff,0xe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x0,0x0,0x0,],
        [0xf0,0x0,0x9,0x38,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x3,0x0,b[0],b[1],b[2],0x10,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x3,0x0,0x0,0xa5,0xff,0xff,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,],
        [0xf0,0x0,0xa,0x38,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x3,0x0,0xff,0xff,0xff,0xff,0x11,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x3,0x0,0xff,0xff,0x0,0x0,0x0,0x0,0x0,],
        [0xf0,0x0,0xb,0x38,0xff,0x12,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x3,0x0,0x3d,0xff,0x0,0xff,0x13,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x0,0x0,0x0,],
        [0xf0,0x0,0xc,0x38,0x0,0x3,0x0,c[0xa5][0],c[0xa5][1],c[0xa5][2],0xff,0x14,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xff,0xff,0x15,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x0,0x0,0x0,0x0,],
        [0xf0,0x0,0xd,0x38,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x3,0x0,0x0,0xff,0xff,0xff,0x16,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x3,0x0,0x42,0x5c,0x61,0xff,0x17,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x0,0x0,0x0,0x0,],
        [0xf0,0x0,0xe,0x38,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x3,0x0,0x77,0x77,0x77,0xff,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x3,0x0,0x5e,0x73,0x79,0xff,0x19,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,],
        [0xf0,0x0,0xf,0x38,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x1a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x4,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,],
        [0xf0,0x0,0x10,0x38,0x1b,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x19,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0xe,0x0,0x0,0x0,0x4,0x0,0x2,0x0,0x0,0x0,0x1c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x32,0xbb,0x0,0x0,0x1a,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,],
        [0xf0,0x0,0x11,0x12,0x2,0x32,0xbb,0x0,0x0,0x1c,0x1,0x0,0x0,0x76,0x72,0x19,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,],
    ]


# fmt: on

MCDU_INIT_SEQUENCE = BUILD_INIT_SEQUENCE()
