{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WINWING Device to X-Plane","text":"<p>Welcome.</p> <p>The pywinwing package is a python package that aim at interfacing Winwing devices to X-Plane.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#hid-library","title":"HID Library","text":"<p>You must first install a USB HID library. The installation of this library depends on your operating system. We recommand using the hidapi widely used and available.</p> <p>On MacOS, the library is installed by brew or port package manager like</p> <pre><code>brew install hidapi\n</code></pre> <p>This library will be used by a python package.</p> <p>pywinwing uses this python package which appears to be a simple python wrapper around essential hidapi library functions. Nothing more, nothing less. Couldn't be simpler.</p>"},{"location":"#python-application","title":"Python Application","text":"<p>It is advisable to create and use a dedicated python environment.</p> <p>To install the Winwing application, issue the following command to install the appropriate python package and its dependencies:</p> <pre><code>pip install 'winwing @ git+https://github.com/devleaks/pywinwing.git'\n</code></pre> <p>Partof the installation of the above package is the installation of a command that can be executed from the prompt.</p>"},{"location":"#usage","title":"Usage","text":"<p>The installation process creates a new command that can be executed from the prompt in a terminal window.</p> <pre><code>$ winwing-cli --help\n\nusage: winwing-cli [-h] [--version] [-v] [-l] [-a] [--use-beacon] [--host HOST] [--port PORT] [--aircraft acf.yaml] [--extension ext_dir [ext_dir ...]]\n\nWinwing Devices for X-Plane\n\noptions:\n  -h, --help            show this help message and exit\n  --version             shows version information and exit\n  -v, --verbose         shows more information\n  -l, --list            lists Wingwing devices connected to the system\n  -a, --list-all        lists all HID devices connected to the system\n  --port PORT           TCP port for X-Plane Web API\n  --use-beacon          REMOTE USE ONLY - attempt to use X-Plane UDP beacon to discover network address\n  --host HOST           REMOTE USE ONLY - host IP name or address for X-Plane Web API\n  --aircraft acf.yaml   DEVELOPER ONLY - uses this aircraft configuration file\n  --extension ext_dir [ext_dir ...]\n                        DEVELOPER ONLY - adds extension folders to application\n</code></pre> <p>As a normal use, you can ignore REMOTE USE ONLY and DEVELOPER ONLY options.</p>"},{"location":"#important-note","title":"Important Note","text":"<p><code>winwing-cli</code> application is stateless.</p> <p>In case of problem, misbehavior, errors... simply stop the application and restart it. If problem persists, enter an issue on github.</p> <p>MCDU display sometimes get de-synchronized. To recognize this state, start <code>winwing-cli</code> and nothing will display on the MCDU device, not even a welcome screen, it will remain black, which is unusual.</p> <p>To re-synchronize it, unplug the Winwing MCDU device for a few seconds and plug it in back. Restart <code>winwing-cli</code>.</p> <p>This event is still under investigation and rarely appears, however, I prefer to mention it here.</p>"},{"location":"#more-devices","title":"More Devices","text":"<p>The package is more that the Winwing application. It is a framework that facilitates the addition of devices and aircraft specifics into the same application.</p> <p>See developer notes on the menu / side bar.</p>"},{"location":"changelog/","title":"Changelog","text":"<ul> <li> <p>0.4.0 - Added set_background and set_font</p> </li> <li> <p>0.3.X - Was basically refactoring and code cleanup. But recall, entropy &gt; 0. Always.</p> </li> <li> <p>0.2.2 - Added MCDUAircraft ABC with MCDU specifics</p> </li> <li>0.2.1 - Added extension folder handling for new devices</li> <li> <p>0.2.0 - Added extension folder handling for aircrafts</p> </li> <li> <p>0.1.1 - Cleanup up all color variants, now only one authoritative from Winwing MCDU (+ define color there too)</p> </li> <li> <p>0.1.0 - First distribuable version</p> </li> <li> <p>0.0.7 - Aircraft is hook to add more Airbus aircraft from other authors</p> </li> <li>0.0.6 - Added Laminar A333 and adjusted code moving aicraft-dependant stuff to Aircraft class</li> <li>0.0.5 - Better handling of aircraft</li> <li>0.0.4 - Added device adapter template</li> <li>0.0.3 - Clean exit on keyboard interrupt</li> <li>0.0.2 - Uses X-Plane UDP beacon for configuration</li> <li>0.0.1 - First distribution, only MCDU, consider alpha release</li> </ul>"},{"location":"devnotes/","title":"pywinwing Developer Notes","text":"<p>The package is a framework that facilitates the addition of devices and aircraft specifics into the same application.</p> <p>Given the positive news that more devices will soon come, pywinwing has a framework to handle them all.</p>"},{"location":"devnotes/#custom-aircraft","title":"Custom Aircraft","text":"<p>A Winwing Aircraft is an entity that encapsulate aircraft specifics.</p> <p>There are two parts to an aircraft.</p> <ol> <li>An optional python class, derived from <code>Aircraft</code> class.</li> <li>An accompagnying configuration data file, containing data for the above class (list of dataref to fetch, commands to issue, etc.)</li> </ol>"},{"location":"devnotes/#custom-aircraft-class","title":"Custom Aircraft Class","text":"<p>Later.</p>"},{"location":"devnotes/#custom-configuration-data-file","title":"Custom Configuration Data File","text":"<p>If a developer want to collect the requirements to support a new aircraft, the developer can temporary load a specific aircraft configuration. This is accomplished with the \u2014aircraft flag:</p> <p>winwing-cli \u2014aircraft devfile.yaml</p> <p>In this case, winwing-cli will cancel its ability to change aircraft when the user changes the aircraft in X-Plane. A warning message will be sent accordingly.</p> <p>In all case, an Aicraft Adapter must already exist for that aircraft to handle aicraft specifics.</p>"},{"location":"devnotes/#about-aircraft-configuration-file","title":"About Aircraft Configuration File","text":"<p>The ACF specifies aircraft specific parameters necessary to make the device work as expected.</p> <p>ACF files are Yaml formatted files. Yaml is a highly human readable format. It consists of structured name: value pairs, where the value can by a number, text, a list of values, or another list of name: value pairs.</p>"},{"location":"devnotes/#pywinwing-future","title":"pywinwing Future","text":"<p>When an aircraft is proven working, it can be included in pywinwing standard distribution.</p> <p>Please submit a pull request on github to do so.</p>"},{"location":"devnotes/#adding-a-new-winwing-device","title":"Adding a new Winwing Device","text":"<p>Winwing Devices are derived from the python WinwingDevice class. A WinwingDevice has a \"hardware adapter\" (device driver) that reads \"messages\" sent by the hardware device and transmit them to the application through a Device Report instance. Upon receipt of a Report, the application executes the appropriate Action.</p> <p>Aircraft specifics are derived from a python Aircraft class. The Aircraft class has the ability to read a configuration file to customize its behavior. In X-Plane, Aircraft are identified by their ICAO code and their author(s) name(s). Additionnally, there is room for a \"variant\" additional attribute. (NEO engine variants, configurations, etc.)</p> <p>Communication with the simulator is offered through the X-Plane Web API python package. The application receives \"messages\" sent by the simulator through a Simulator Report instance.</p> <p>For developer, the Winwing package has a structure ready for extensibility. New device packages are added to <code>winwing.devices</code>. New device or aircraft configuration files are added to <code>winwing.assets</code>.</p> <p>Main class is <code>winwing.devices.WinwingDevice</code>; helper classes are in <code>winwing.helpers</code>: <code>Action</code>, <code>Report</code>, and <code>Aircraft</code>.</p> <p>Winwing Application provides the following:</p> <ul> <li>A HIDDevice hardware adapter</li> <li>A MCDU device handler, which works for several Airbus aircraft</li> <li>A MCDU aircraft handler for ToLiss Airbus and Laminar 'stock' Airbus (A330-200)</li> </ul> <p>The handler for ToLiss Airbus has aircraft configuration files for - A321, A21N, - A330-900, - Flight Factor and ToLiss A350-900 It shouldn't be difficult to add configuration files for other ToLiss aircrafts (A319, A320neo, and forthcoming A320 ceo, and may be A340-600.)</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#core-classes","title":"Core Classes","text":"<ul> <li>Device Manager</li> <li>Winwing Device</li> <li>Device Driver<ul> <li>HID Device</li> </ul> </li> <li>Helper classes<ul> <li>Aircraft</li> <li>Action</li> <li>Report</li> </ul> </li> </ul>"},{"location":"reference/#implementation-example","title":"Implementation Example","text":"<ul> <li>Winwing Device / MCDU</li> <li>HID Device / MCDU</li> <li>Aircraft / MCDUAircraft</li> <li>Aircraft / MCDUAircraft / ToLissAirbus</li> </ul>"},{"location":"reference/#device-manager","title":"Device Manager","text":""},{"location":"reference/#winwing-device","title":"Winwing Device","text":""},{"location":"reference/#winwing.devices.WinwingDevice","title":"WinwingDevice","text":"<pre><code>WinwingDevice(vendor_id: int, product_id: int)\n</code></pre> <p>Methods:</p> <ul> <li> <code>on_dataref_update</code>             \u2013              <p>Stop device handling</p> </li> <li> <code>run</code>             \u2013              <p>Starts device handling</p> </li> <li> <code>set_api</code>             \u2013              <p>Stop device handling</p> </li> <li> <code>terminate</code>             \u2013              <p>Stop device handling</p> </li> </ul>"},{"location":"reference/#winwing.devices.WinwingDevice.on_dataref_update","title":"on_dataref_update  <code>abstractmethod</code>","text":"<pre><code>on_dataref_update(dataref: str, value)\n</code></pre> <p>Stop device handling</p>"},{"location":"reference/#winwing.devices.WinwingDevice.run","title":"run  <code>abstractmethod</code>","text":"<pre><code>run()\n</code></pre> <p>Starts device handling</p>"},{"location":"reference/#winwing.devices.WinwingDevice.set_api","title":"set_api  <code>abstractmethod</code>","text":"<pre><code>set_api(api)\n</code></pre> <p>Stop device handling</p>"},{"location":"reference/#winwing.devices.WinwingDevice.terminate","title":"terminate  <code>abstractmethod</code>","text":"<pre><code>terminate()\n</code></pre> <p>Stop device handling</p>"},{"location":"reference/#device-driver","title":"Device Driver","text":""},{"location":"reference/#winwing.devices.DeviceDriver","title":"DeviceDriver","text":"<pre><code>DeviceDriver()\n</code></pre>"},{"location":"reference/#hid-device","title":"HID Device","text":""},{"location":"reference/#winwing.devices.HIDDevice","title":"HIDDevice","text":"<pre><code>HIDDevice(vendor_id: int, product_id: int)\n</code></pre>"},{"location":"reference/#winwing-device_1","title":"Winwing Device","text":""},{"location":"reference/#winwing.devices.WinwingDevice","title":"WinwingDevice","text":"<pre><code>WinwingDevice(vendor_id: int, product_id: int)\n</code></pre> <p>Methods:</p> <ul> <li> <code>on_dataref_update</code>             \u2013              <p>Stop device handling</p> </li> <li> <code>run</code>             \u2013              <p>Starts device handling</p> </li> <li> <code>set_api</code>             \u2013              <p>Stop device handling</p> </li> <li> <code>terminate</code>             \u2013              <p>Stop device handling</p> </li> </ul>"},{"location":"reference/#winwing.devices.WinwingDevice.on_dataref_update","title":"on_dataref_update  <code>abstractmethod</code>","text":"<pre><code>on_dataref_update(dataref: str, value)\n</code></pre> <p>Stop device handling</p>"},{"location":"reference/#winwing.devices.WinwingDevice.run","title":"run  <code>abstractmethod</code>","text":"<pre><code>run()\n</code></pre> <p>Starts device handling</p>"},{"location":"reference/#winwing.devices.WinwingDevice.set_api","title":"set_api  <code>abstractmethod</code>","text":"<pre><code>set_api(api)\n</code></pre> <p>Stop device handling</p>"},{"location":"reference/#winwing.devices.WinwingDevice.terminate","title":"terminate  <code>abstractmethod</code>","text":"<pre><code>terminate()\n</code></pre> <p>Stop device handling</p>"},{"location":"reference/#helper-classes","title":"Helper Classes","text":""},{"location":"reference/#aircraft","title":"Aircraft","text":""},{"location":"reference/#winwing.helpers.Aircraft","title":"Aircraft","text":"<pre><code>Aircraft(author: str, icao: str, variant: str = '')\n</code></pre> <p>Methods:</p> <ul> <li> <code>adapters</code>             \u2013              <p>Returns the list of all subclasses of Aircraft.</p> </li> <li> <code>datarefs</code>             \u2013              <p>Returns all datarefs used by this aircraft configuration and that may be requested to the simulator</p> </li> <li> <code>device_reports</code>             \u2013              <p>Returns key mapping.</p> </li> <li> <code>display_datarefs</code>             \u2013              <p>Returns datarefs necessary to drive entire display content</p> </li> <li> <code>init</code>             \u2013              <p>Convenience function that can be used to adjust aircraft properties</p> </li> <li> <code>new</code>             \u2013              <p>Create aircraft for supplied (author, icao)</p> </li> <li> <code>same_variant</code>             \u2013              <p>Compare two aicraft variants if they are set.</p> </li> <li> <code>simulator_reports</code>             \u2013              <p>Returns simulator feedback for device handling.</p> </li> <li> <code>variant_datarefs</code>             \u2013              <p>Returns list of datarefs necessary for variant determination.</p> </li> <li> <code>variant_key</code>             \u2013              <p>Build variant string from variant dataref values</p> </li> <li> <code>wait_for_aircraft_variant</code>             \u2013              <p>Wait for value of aicraft variant datarefs</p> </li> </ul>"},{"location":"reference/#winwing.helpers.Aircraft.adapters","title":"adapters  <code>staticmethod</code>","text":"<pre><code>adapters() -&gt; list\n</code></pre> <p>Returns the list of all subclasses of Aircraft.</p> <p>Recurses through all sub-sub classes</p> <p>Returns:</p> <ul> <li> <code>list</code>           \u2013            <p>[list]: list of all Aircraft subclasses</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If invalid class found in recursion (types, etc.)</p> </li> </ul>"},{"location":"reference/#winwing.helpers.Aircraft.datarefs","title":"datarefs","text":"<pre><code>datarefs() -&gt; Set[str]\n</code></pre> <p>Returns all datarefs used by this aircraft configuration and that may be requested to the simulator</p> <p>Returns</p> <pre><code>List[str]: list of all datarefs used by this configuration\n</code></pre>"},{"location":"reference/#winwing.helpers.Aircraft.device_reports","title":"device_reports","text":"<pre><code>device_reports() -&gt; List\n</code></pre> <p>Returns key mapping.</p> <p>Supplied information is sufficient to perform necessary action for key.</p> <p>Returns</p> <pre><code>List[Dict]:\n</code></pre>"},{"location":"reference/#winwing.helpers.Aircraft.display_datarefs","title":"display_datarefs","text":"<pre><code>display_datarefs() -&gt; Set[str]\n</code></pre> <p>Returns datarefs necessary to drive entire display content</p> <p>Returns</p> <pre><code>List[str]: list of datarefs used for display\n</code></pre>"},{"location":"reference/#winwing.helpers.Aircraft.init","title":"init","text":"<pre><code>init(device: WinwingDevice) -&gt; bool\n</code></pre> <p>Convenience function that can be used to adjust aircraft properties    depending on device and/or API used</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>success of initialisation</p> </li> </ul>"},{"location":"reference/#winwing.helpers.Aircraft.init(device)","title":"<code>device</code>","text":"(<code>WinwingDevice</code>)           \u2013            <p>[description]</p>"},{"location":"reference/#winwing.helpers.Aircraft.new","title":"new  <code>staticmethod</code>","text":"<pre><code>new(author: str, icao: str, variant: str = '', extension_paths: List[str] = [])\n</code></pre> <p>Create aircraft for supplied (author, icao)</p> <p>If no device aircraft can be found, returns None</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Aircraft</code>           \u2013            <p>Aircraft adapter</p> </li> </ul>"},{"location":"reference/#winwing.helpers.Aircraft.new(author)","title":"<code>author</code>","text":"(<code>str</code>)           \u2013            <p>Author of aircraft</p>"},{"location":"reference/#winwing.helpers.Aircraft.new(icao)","title":"<code>icao</code>","text":"(<code>str</code>)           \u2013            <p>Aircraft ICAO</p>"},{"location":"reference/#winwing.helpers.Aircraft.same_variant","title":"same_variant","text":"<pre><code>same_variant(variant) -&gt; bool\n</code></pre> <p>Compare two aicraft variants if they are set.</p> <p>If one if not set, returns that they are equivalent.</p> <p>returns:</p> <p>(bool): Aircraft variants equivalence</p>"},{"location":"reference/#winwing.helpers.Aircraft.simulator_reports","title":"simulator_reports","text":"<pre><code>simulator_reports() -&gt; List\n</code></pre> <p>Returns simulator feedback for device handling.</p> <p>Supplied information is sufficient to perform necessary action for key.</p> <p>Returns</p> <pre><code>List[Dict]:\n</code></pre>"},{"location":"reference/#winwing.helpers.Aircraft.variant_datarefs","title":"variant_datarefs","text":"<pre><code>variant_datarefs() -&gt; Set[str]\n</code></pre> <p>Returns list of datarefs necessary for variant determination.</p> <p>returns     (Set): List of datarefs necessary for variant determination</p>"},{"location":"reference/#winwing.helpers.Aircraft.variant_key","title":"variant_key","text":"<pre><code>variant_key() -&gt; str\n</code></pre> <p>Build variant string from variant dataref values</p> <p>This allows to inspect one or more datarefs and determine the aicraft variant from those datarefs.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Variant identification</p> </li> </ul>"},{"location":"reference/#winwing.helpers.Aircraft.wait_for_aircraft_variant","title":"wait_for_aircraft_variant","text":"<pre><code>wait_for_aircraft_variant(api)\n</code></pre> <p>Wait for value of aicraft variant datarefs</p>"},{"location":"reference/#action","title":"Action","text":""},{"location":"reference/#winwing.helpers.Action","title":"Action","text":"<pre><code>Action(name: str, config: dict)\n</code></pre>"},{"location":"reference/#report","title":"Report","text":""},{"location":"reference/#winwing.helpers.Report","title":"Report","text":"<pre><code>Report(name: str, key: str, action: Action)\n</code></pre> <p>Parameters:</p>"},{"location":"reference/#winwing.helpers.Report(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>Name of report, documentation</p>"},{"location":"reference/#winwing.helpers.Report(key)","title":"<code>key</code>","text":"(<code>str</code>)           \u2013            <p>Access key of report, used to identify it</p>"},{"location":"remote/","title":"pywinwing Remote Usage","text":""},{"location":"remote/#same-host","title":"Same host","text":"<p>In normal operations, when everything is connected to the same computer, it is suffisent to type</p> <pre><code>winwing-cli\n</code></pre> <p>`winwing-cli will try to connect to all devices available on the computer and load the aircraft currently loaded in X-Plane specifics to set the display on devices accordingly.</p> <p>If a device is not supported, it is ignored.</p> <p>If a currently loaded aircraft is not adapted for the devices, the aircraft is not loaded.</p> <p>In both cases, warning messages are issued on the console.</p>"},{"location":"remote/#remote-host","title":"Remote host","text":"<p>It is possible to use device connected to one computer with X-Plane running on another computer. Winwing-cli must run on the computer where the devices are connected. In this case, winwing-cli will automatically connect the the X-Plane instance it find on the local area network.</p> <p>Networking options are:</p> <pre><code>winwing-cli --use-beacon\n</code></pre> <p>Monitors X-Plane UDP beacon to set up network parameters automatically. (The message in the beacon contains the necessary information.)</p> <p>If no beacon is found, explicit hostname and port can be supplied on command line</p> <pre><code>winwing-cli --host host_with_xplane --port 8080\n</code></pre> <p>THe port number should be TCP port number of the proxy server installed where X-Plane runs.</p>"},{"location":"report/","title":"Proposed device configuration file","text":"<p>A device or the simulator sends a report (name loosely inspired by HID protocol).</p> <p>Reports have a \"type\", and depending on their type, carry information or value they transfer. That's what this file attempts to show.</p> <p>Device reports are sent by HID device. They carry some information. For example, a \"key-pressed\" report is issued when a key is pressed, and the information it carries it the name or identifier of the key that was pressed.</p> <p>This file explain what must be done when that report is received: the action that must be carried over.</p> <p>Similarly, the simulator also sends messages on the Web socket, reflecting simulator variable changes, or executed commands.</p> <p>In turn, these simulator-reports trigger actions on the device: refresh the display (set-display), turn this LED on or off, adjust screen brightness or keyboard backlight...</p>"},{"location":"report/#reports-report-type","title":"REPORTS (<code>report-type</code>)","text":"<p>Simulator report:</p> <ul> <li>simulator-value-change, parameter: simulator-value-name</li> <li>simulator-command-active, parameter: simulator-command-name</li> </ul> <p>MCDU Device Reports:</p> <ul> <li>key-press, parameter: key-name</li> <li>device-value-change, parameter: device-value-name</li> </ul>"},{"location":"report/#actions-what-to-do-when-report-received","title":"ACTIONS (what to do when report received)","text":"<p>Simulator actions:</p> <ul> <li>execute-simulator-command, parameter: simulator-command-name</li> <li>set-simulator-value, parameter: simulator-value-name</li> </ul> <p>MCDU actions:</p> <ul> <li>set-device-value, parameter: device-value-name</li> <li>set-device-led, parameter: device-led-name</li> </ul>"},{"location":"report/#example-of-configuration-file","title":"Example of Configuration File","text":"<p>Here are some portion of configuration file to illustrate above directives:</p> <pre><code>device-reports:\n\n    - report-type: key-press\n      key-index: 0\n      key-name: LSK1L\n      action: execute-simulator-command\n      simulator-command-name: AirbusFBW/MCDU1LSK1L\n\n    - report-type: device-value-change\n      device-value-index: 74\n      device-value-name: LCDBright1\n      action: set-simulator-value\n      simulator-value-name: AirbusFBW/DUBrightness[6]\n\nsimulator-reports:\n\n    - report-type: simulator-value-change\n      simulator-value-name: AirbusFBW/MCDU1VertSlewKeys\n      action: refresh-display\n\n    - report-type: simulator-value-change\n      simulator-value-name: AirbusFBW/MCDU1VertSlewKeys\n      action: refresh-display\n\n    - report-type: simulator-value-change\n      simulator-value-name: sim/aircraft/view/acf_author\n      action: change-aircraft\n\n    - report-type: simulator-value-change\n      simulator-value-name: sim/aircraft/view/acf_ICAO\n      action: change-aircraft\n\n    - report-type: simulator-command-active\n      simulator-command-name: sim/map/show_current\n      action: set-device-led\n      device-led-name: status\n\n    - report-type: simulator-plugin-event\n      simulator-event-name: new-scenery-loaded\n      action: some-future-action\n\n</code></pre>"},{"location":"usage/","title":"pywinwing - Winwing Devices to X-Plane","text":"<p>The installation process creates a command that can be executed from the prompt in a terminal window.</p> <pre><code>$ winwing-cli --help\n\nusage: winwing-cli [-h] [--version] [-v] [-l] [-a] [--host HOST] [--port PORT] [--aircraft acf.yaml]\n\nWinwing Devices for X-Plane\n\noptions:\n  -h, --help           show this help message and exit\n  --version            show version information and exit\n  -v, --verbose        show more information\n  -l, --list           list Wingwing devices connected to the system\n  -a, --list-all       list all HID devices connected to the system\n  --host HOST          Host IP name or address for X-Plane Web API\n  --port PORT          TCP port for X-Plane Web API\n  --aircraft acf.yaml  Use this aircraft configuration file\n</code></pre>"},{"location":"usage/#everything-on-same-computer-simplest-most-common-case","title":"Everything on same computer (simplest, most common case)","text":"<p>If Winwing devices are connected to the computer running X-Plane, issue:</p> <pre><code>winwing-cli\n</code></pre> <p>The application will start, connect to X-Plane locally and start managing the device(s).</p>"},{"location":"usage/#use-with-two-computers","title":"Use with Two Computers","text":"<p>If your winwing devices are connected to another computer than the one running X-Plane, they can be used by issuing</p> <pre><code>winwing-cli --use-beacon\n</code></pre> <p>provided you allowed X-Plane to send the beacon, and are on the same local area network.</p> <p>Alternatively, without a beacon, hostname and TCP port number where to contact X-Plane can be supplied on the command line:</p> <pre><code>winwing-cli --host host_where_xplane --port 8080\n</code></pre> <p>The application will try to connect to the supplied (hostname, port) and collect data from X-Plane Web API.</p>"},{"location":"usage/#important-note","title":"Important Note","text":"<p><code>winwing-cli</code> application is stateless.</p> <p>In case of problem, misbehavior, errors... simply stop the application and restart it. If problem persists, enter an issue on github.</p> <p>In rare occation, display get de-synchronized, does not display properly, lines appears to be mixed, or display no longer changes. Issue is under investigation and rarely occurs. To re-synchronize it, stop <code>winwing-cli</code>, unplug the Winwing MCDU device for a few seconds and plug it in back. Restart <code>winwing-cli</code>.</p>"},{"location":"usage/#usage-notes","title":"Usage Notes","text":"<p>Application will switch aircraft if you do change aircraft in X-Plane.</p> <p>If no suitable aircraft is found for the device, it will display waiting for aircraft... on the MCDU display.</p> <p>This script only allows for known (devices, aircrafts) combination.</p>"},{"location":"usage/#development","title":"Development","text":"<p>The pywinwing package is a framework that allows for inclusion of   - more Winwing devices   - more aircrafts for existing or new devices.</p> <p>Please refer to the technical wiki for more information on the framework.</p> <p>Last updated July 2025</p>"},{"location":"variants/","title":"Aircraft \u00ab Variants \u00bb","text":"<p>A given aircraft might have different \u00abvariants\u00bb.</p> <p>For example, Airbus A321 neo, ICAO code A21N, can have the following \u00abvariants\u00bb:</p> <ul> <li>A321-251N</li> <li>A321-252N</li> <li>A321-253N</li> <li>A321-271N</li> <li>A321-272N</li> <li>A321-251NX</li> <li>A321-252NX</li> <li>A321-253NX</li> <li>A321-271NX</li> <li>A321-272NX</li> <li>A321-253NY</li> <li>A321-271NY</li> </ul> <p>They are all recognized as ICAO code A21N.</p> <p>Variants differt in engine make and models, aircraft length and capacity (LR, XLR), and additional fuel tanks.</p> <p>While this often has little effect on managed devices, it might be important to know which variant a pilot is currently using.</p> <p>Since X-Plane does not provide a mechanism to enter and manage variants, Winwing application created one.</p> <p>Mechanism is simple and based on regular X-Plane features.</p> <p>Ultimately, the variant of an aircraft model is a character string (for example 272NX, or 271NY).</p> <p>To deternmine the variant, it is necessary to read one or more X-Plane datarefs. Then, from the values of the datarefs, an aircraft model/type will use a custom function to produce the appropriate variant string.</p> <p>For example, an aircraft might list the engine manufacturer, and the engine maximum trust. It may also list the number of auxialiary (center) tanks.</p> <p>From the values of these parameters, it is possible to determine the variant of the aircraft currently used.</p> <p>If defined, present, and not empty, the variant string will be used to see if a custom aircraft configuration exists for this variant.</p> <p>If none is found, the aircraft will use the version without variant.</p>"}]}